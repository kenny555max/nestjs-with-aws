name: Deploy to AWS (Docker + CDK)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ECR_NAME: ${{ secrets.AWS_ECR_NAME }}
          AWS_REGION: 'us-west-2'
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t social-network-app:latest .

      - name: Tag Docker image
        run: |
          docker tag $AWS_ECR_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_NAME:latest

      - name: Push Docker image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_NAME:latest

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Cache Node.js dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./package-lock.json') }}

      - name: Install CDK dependencies
        working-directory: ./question-assignment-architecture
        run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Deploy CDK Stack
        working-directory: ./question-assignment-architecture
        run: npx cdk deploy --require-approval never
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-west-2'